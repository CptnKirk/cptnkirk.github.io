<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Software Samurai]]></title>
  <link href="http://CptnKirk.github.io/atom.xml" rel="self"/>
  <link href="http://CptnKirk.github.io/"/>
  <updated>2013-07-05T21:00:29-07:00</updated>
  <id>http://CptnKirk.github.io/</id>
  <author>
    <name><![CDATA[Jim Hazen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This book will make you a better Software Developer]]></title>
    <link href="http://CptnKirk.github.io/blog/2013/07/05/this-book-will-make-you-a-better-software-developer/"/>
    <updated>2013-07-05T17:31:00-07:00</updated>
    <id>http://CptnKirk.github.io/blog/2013/07/05/this-book-will-make-you-a-better-software-developer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just finished reading a beta copy of Joe Armstrong&rsquo;s latest book: <a href="http://pragprog.com/book/jaerlang2/programming-erlang">Programming Erlang (2nd edition)</a>.  I got the book because I have an interest in Erlang, respect Joe Armstrong, and don&rsquo;t have the 1st edition.  I expected to learn more about Erlang.  What I got was so much more.</p>

<p>To me, this book is truly great not because it teaches you Erlang.  It&rsquo;s great because it teaches you the fundamentals of modern concurrent software systems and <em>then</em> demonstrates how to implement such systems with the Erlang language, its foundational libraries and a few free 3rd-party libraries.</p>

<p>I&rsquo;ve been programming in mostly Java for the last 17+ years.  This book on Erlang has shown me how to be a better Java Developer.</p>

<p>How can this be?  This is possible because the goals of modern software systems are language agnostic.  Your users don&rsquo;t care what programming language your thing is written in.  They care about the feature set, the rate of new features, the speed of the system and the availability of the system.  You as a developer care about the maintainability of the system and ease at which the solutions in your head can be turned into solutions your users can use.</p>

<p>How this book helps every Developer:</p>

<!--more-->


<ul>
<li>Gets you thinking about abstractions. This is an insanely important concept for every developer to grasp.  No matter what kind of project you have, you&rsquo;ll be working with and developing abstractions.  When you use a development framework you&rsquo;re leveraging an abstraction.  It&rsquo;s vitally important to understand these abstractions to make the most of them.  When you&rsquo;re developing a software system you&rsquo;re exposing your own abstractions to your users. You may not think you&rsquo;re doing this, but you are.  You as a developer are distilling the limitless possibilities of software down to a set of specific behaviors that your system supports.  The better defined these behaviors are, the better your software will be.</li>
</ul>


<p>Put another way, software systems can be expressed as a collection of general behaviors driven by specific inputs.  The better you are at understanding the general, the better you&rsquo;ll be at taking advantage of the specifics.  On the flip side, the better your general abstractions are, the better your users will be at using them to drive their specifics.  And the more successful your users are with your system, the better off you are. Once the book points out a few abstractions, you&rsquo;ll start to notice them everywhere.</p>

<ul>
<li>Gets you thinking functionally.  Erlang is a language that supports higher order functions (functions that take other functions).  Java is not.  This doesn&rsquo;t mean there&rsquo;s nothing for the Java guy.  On the contrary, you&rsquo;ll be exposed to some beautiful data processing abstractions that you&rsquo;ll yearn for from now on.  Mapping, folding, filtering, both sequentially and in parallel; you want these abstractions. Once you see their beauty you can think about how to get that beauty in whatever language you&rsquo;re using.  Just thinking along those lines makes you better than you were.  For the Java guys, <a href="http://groovy.codehaus.org/">Groovy</a> brings excellent functional support to Java.  Technically Groovy is a new language, but it integrates so well that I think of it more as Java++.  <a href="http://code.google.com/p/guava-libraries/">Guava</a> is a pure set of Java libraries from Google that implement many functional abstractions within the Java language.  Java 8 will include support for functional programming via <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Lambdas</a>.</li>
</ul>


<p>Functional abstractions let you write much shorter code and reduce the thought/code impedance mismatch. Once familiar with existing functional abstractions you can start building your own. Once you&rsquo;ve built your own you&rsquo;ll find that composing these abstractions becomes much easier.  Your codebase becomes clearer and smaller and simpler.</p>

<ul>
<li><p>Gets you thinking in terms of isolation + messaging.  Most modern software systems want/need to support concurrency.  For many developers this is an extremely difficult area of computer science to get right.  You think it&rsquo;s hard to start with, then you think you have it finally figured out, then Doug Lea shows you that you don&rsquo;t. This is because you&rsquo;re trying to coordinate access to shared state.  If instead don&rsquo;t share any state and instead communicate via messages a whole class of problems disappears.  You also end up with an architecture well aligned for distributed computing.</p></li>
<li><p>Demonstrates that distributed computing doesn&rsquo;t have to be complicated. Erlang supports location transparency out of the box. The book shows you how Erlang does it.  Once you&rsquo;ve seen it done effortlessly you can think about how you might accomplish something similar given the tools that you have.  You&rsquo;ll be better off after the show and tell at the very least.</p></li>
<li><p>Gets you thinking in terms of embedding functionality into your product, rather than embedding your product into an external container.  This isn&rsquo;t explicitly called out in the book, but it&rsquo;s something that has become apparent after reading the book, getting better at spotting abstractions and digging into several Erlang projects.</p></li>
</ul>


<p>In the Java world, if your service is communicating via HTTP or HTTPS, your service code is probably deployed within a &ldquo;web container&rdquo;.  This container acts as a middleman between your users and your Java code, translating HTTP requests into Java method calls.  In Java you embed your business code within someone else&rsquo;s container.  In Erlang, you embed someone else&rsquo;s HTTP abstraction within your application.</p>

<p>There are pros and cons, but many developers aren&rsquo;t even aware that thinking in terms of an &ldquo;abstraction marketplace&rdquo; for their project is an option.  For the Java guys wanting HTTP protocol handling <em>within</em> their application, take a look at <a href="http://www.eclipse.org/jetty/">Jetty</a> and <a href="http://netty.io/">Netty</a>.</p>

<hr />

<p>I&rsquo;m going to stop here.  If you&rsquo;re a hacker, buy this book.  I think you&rsquo;ll probably like Erlang, but even if you don&rsquo;t there&rsquo;s a good chance you&rsquo;ll get some quality ideas for improving your next project.</p>

<p>PS:  Most of this post was selling this book on the merits of high level abstractions and whatnot, but that&rsquo;s not nearly all.  If you wanna learn about using Erlang for websockets, writing a custom MP3 shoutcast server, or even a distributed search engine.  This book puts its money where its mouth is and uses all this talk to develop some nice functional software.  The examples are clear, but also very powerful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Spotlight: Kresten Krab Thorup]]></title>
    <link href="http://CptnKirk.github.io/blog/2013/06/18/hacker-spotlight-kresten-krab-thorup/"/>
    <updated>2013-06-18T20:14:00-07:00</updated>
    <id>http://CptnKirk.github.io/blog/2013/06/18/hacker-spotlight-kresten-krab-thorup</id>
    <content type="html"><![CDATA[<p>In a <a href="blog/2013/06/04/cultivating-a-hacker-culture-the-culture/">prior post</a> I discussed the hacker culture.  Recently I came across an excellent example of a hacker.  In this video about using visualization to learn about what is going on within an Erlang VM, Kresten demonstrates the true hacker spirit.  I look back at my past post and feel somewhat embarassed.  I look back at the top four things I say make up a hacker and I feel like I missed the ball on the meaning of Christmas.</p>

<p>A true hacker is driven by the curiosity and love of hacking (coding).  The drive to learn and build.</p>

<p>Here&rsquo;s to you, true hacker.</p>

<p><a href="http://www.youtube.com/watch?v=lHoWfeNuAN8">Original YouTube page</a>. Follow the link, subscribe, thumb up and enjoy.  Embedded below for convenience.</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/lHoWfeNuAN8?feature=player_detailpage" frameborder="0" allowfullscreen></iframe>


<p>Hope you enjoyed the show.  Now <a href="http://www.youtube.com/watch?v=lHoWfeNuAN8">go give this guy some +1 lovin</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do you want a blog like this?]]></title>
    <link href="http://CptnKirk.github.io/blog/2013/06/06/do-you-want-a-blog-like-this/"/>
    <updated>2013-06-06T22:04:00-07:00</updated>
    <id>http://CptnKirk.github.io/blog/2013/06/06/do-you-want-a-blog-like-this</id>
    <content type="html"><![CDATA[<p>Getting a blog like this one, or at least one that looks like this one is easy and free.</p>

<p>There are many different ways to blog these days, many of them free, but I chose this method for a few reasons:</p>

<ul>
<li><p>Comes with a free code repository built in.  Because this is backed by github, it is not only possible to post code snippets, but entire executable projects (with associated issue tracking and wiki) demonstrating my ideas.</p></li>
<li><p>Is a full fledged hosted site and blogging system.  Thus far I&rsquo;ve typed a few commands to generate the site, then another command to create a text file, then a bunch of words to fill in a couple text files and then another couple commands to build and publish the site.  I&rsquo;ve been mega-leeching off the works of others, and that&rsquo;s ok for now.  Over time I&rsquo;ll want to customize this site into something that is uniquely mine so having full control over the site&rsquo;s code and the ability to host any contents I want (images, videos, files, etc) is important to me.</p></li>
<li><p>Github, jekyll, octopress (some of the software used in this site) are tools for hackers by hackers.  They integrate with other free services made by hackers for hackers (like <a href="http://about.travis-ci.org/docs/">http://about.travis-ci.org/docs/</a>).  Getting into game at this end of the pool sets me up for greater things down the road, both for my blog and development projects.</p></li>
</ul>


<p>Step by step guide to getting one of these bad boys after the break&hellip;</p>

<!-- more -->


<ol>
<li><p>Download octopress (<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>).  Follow the steps at the preceeding link.  You&rsquo;ll also end up installing git and ruby along the way if you don&rsquo;t already have it.</p></li>
<li><p>Continue on to configuring your deployment and pick a github deployment (<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a>).  If it&rsquo;s not overly obvious from the link, you&rsquo;ll need to create a github account (free) by going here (<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a>) and clicking the big green &ldquo;Sign up for free&rdquo; button.  Pick an awesome username and that&rsquo;s about it. You may have to wait for an E-mail or something, but after that, sign back into github.  Once you&rsquo;re back in click on another green button that says &ldquo;New repository&rdquo;.  Name your repository <username>.github.io (the octopress instructions list a .com prefix, and it&rsquo;ll work, but github would prefer you use .io).  The format is important, and if you follow this convention, your repository will be published as a Github Pages site to <username>.github.io.  It takes a few minutes the first time for the sites to sync but it&rsquo;s really fast after that.  When your repo is created, go to your account settings (screwdriver/wrench icon, upper right).  Then on the left click on SSH Keys (<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a>).  Follow the instructions for generating a new one, or upload a public key that you already have.  You&rsquo;ll need this for write access to your repository.  When you&rsquo;re done, head back to console and type <code>rake setup_github_pages</code>.  You&rsquo;ll have to answer some questions based on the information you should now have.</p></li>
<li><p>Now you can generate your base site by typing <code>rake generate</code> followed by <code>rake deploy</code>.  If all goes well, octopress should do its thing and in a few minutes you&rsquo;ll end up with your own empty site at <username>.github.io just waiting for your blog posts.</p></li>
<li><p>Create a blog post, with <code>rake new_post["some title"]</code>.  It&rsquo;ll generate a post file for you and tell you where it is.  Put some text in here and you&rsquo;re blogging.  Blogs like these are mostly text, but can be augmented with a little markup.  If you&rsquo;re wondering how I&rsquo;m able to apply a special treatment to the commands, then visit these pretty good sites for an intro to markdown <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a> and <a href="https://help.github.com/articles/github-flavored-markdown">https://help.github.com/articles/github-flavored-markdown</a>).  Your entries will be prettier than mine in no time.</p></li>
<li><p>Fix _config.yml.  It&rsquo;s at the octopress root dir, it contains some default values at the top, but you want to customize these for yourself.</p></li>
<li><p><code>rake generate</code> to rebuild your site locally, <code>rake deploy</code> to push it out to github servers.  You can also use <code>rake preview</code> to start up a little local server.  This helps you see what will be published.  You can run this little server, edit posts and then visit <a href="http://localhost:4000">http://localhost:4000</a> to see your pre-published site.</p></li>
<li><p>Happy blogging.  Write posts, generate, deploy, again and again.  Go back and read more about octopress, GitHub Pages and all the various flavors of markup syntax that are supported.  Don&rsquo;t like this theme, there are plenty more, take a look at the octopress site.  If you forget where you put it, check the footer at the bottom of your site (or go back to step 1).</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cultivating a Hacker Culture: The Culture]]></title>
    <link href="http://CptnKirk.github.io/blog/2013/06/04/cultivating-a-hacker-culture-the-culture/"/>
    <updated>2013-06-04T10:28:00-07:00</updated>
    <id>http://CptnKirk.github.io/blog/2013/06/04/cultivating-a-hacker-culture-the-culture</id>
    <content type="html"><![CDATA[<p>Previously I wrote about the hacker.  The warrior of the digital age.  In this post I&rsquo;ll explore the hacker culture. When I think about those whom I associate with being members of the hacker culture I think about a few hacker hallmarks:</p>

<ul>
<li><p>Solve a problem.  There are so many problems to be solved and hackers are innate problem solvers. Within the Open Source movement, hacker are free to solve the problems that interest them. In the corporate world they thrive in tackling the hardest problems.  Often working with fellow hackers on innovative solutions.</p></li>
<li><p>Knowledge and information are the lifeblood of achievement and this knowledge must be freely available.  Hackers get a bad rap for being anti-social nerds.  But the truth is that they&rsquo;re often highly social.  The Open Source and Free Software movement demonstrated how hackers from around the world could collaborate together to disrupt and improve the nature of software development.</p></li>
<li><p>The Meritocracy.  The hacker culture at it&rsquo;s core is a meritocracy.  A hacker&rsquo;s accomplishments, his improvements to the culture are his currency.  This promotes the sharing of ideas and the improvement of existing conditions in order to gain the recognition (or sometimes just personal satisfaction) of the community. The more people that use and benefit from your creation the greater the value of that creation.</p></li>
<li><p>Whatever you&rsquo;re doing, be great at it.  You don&rsquo;t have to be a coder to be a hacker.  I&rsquo;ve seen many a DevOps, CQ and PM embody the hacker ideals.</p></li>
</ul>


<!-- more -->


<p>Originally when I started writing this, I had &ldquo;being great (leet/1337)&rdquo; at number one.  But when I thought about it a bit more and realized that at their core hackers are problem solvers.  While hackers to train themselves in the art of clean and performant code, it&rsquo;s typically the problem that drives the hacker and solving the problem is often more important than solving the problem with a lot of &ldquo;perfection&rdquo; overhead.  I suppose that perfection is in the eye of the beholder, but let&rsquo;s just say that I&rsquo;ve seen a lot of problem solved with less than perfect code.</p>

<p>Knowledge is another aspect of the hacker culture.  Knowledge is often the byproduct of invention that fuels the next invention.  Hackers tend to be generous with their knowledge.  Just look at how many blogs like this one seek to spread knowledge.  This blog is written by a hacker, developed with the aid of a publishing tool developed by another hacker and hosted for free by a company run by hackers.  Hopefully the ideas and (soon to be) code contained within this blog will contribute to the knowledge of others and help fuel their creations.</p>

<p>I&rsquo;m going to skip Meritocracy and being great for now.  I&rsquo;ve spent a lot of words, possibly just talking to myself.  The goal however to talk to those just getting started, or those that want more but don&rsquo;t know how or where to start; to help cultivate and contribute to a hacker culture.  It&rsquo;s not really difficult to be a hacker.  Listen, read, gain knowledge, solve a few problems and then teach/show others what you&rsquo;ve learned.  You&rsquo;ll start to gain the respect and appreciation of those you&rsquo;ve helped along the way.  As you solve problems your problem solving skills will improve and you&rsquo;ll find yourself becoming quite good at your chosen art.</p>

<p>Some tips to get you started:</p>

<ul>
<li><p>Find something you enjoy, or a problem you wish you didn&rsquo;t have.  Then build towards that goal.  You may not be able to solve your problem in a night or a weekend, but you can start gaining knowledge right way.  Read up on your subject matter, use the knowledge of those that have come before.  Then start to contribute.  Even if it&rsquo;s just a rambling blog site on your current struggle.  You&rsquo;ll be surprised how many people we share struggles with.</p></li>
<li><p>Invest in personal performance.  Improving your knowledge is great, but being able to apply your knowledge at the speed of thought can be magical.  Invest in learning the tools of your craft.  Learn a text editing program like VIM or Emacs and if you&rsquo;re using an IDE for development, learn the shortcut keys to accelerate common tasks.  It is worth being slower than normal for a few days while you learn.  The speed increases over time more than make up for it.</p></li>
<li><p>Find a community and participate.  You are not alone.  There are many people that share your interests and/or problems.  You&rsquo;ll be amazed at how willing these communities are to help.  Take their help and in return, contribute.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cultivating a Hacker Culture: The Hacker]]></title>
    <link href="http://CptnKirk.github.io/blog/2013/06/01/cultivating-a-hacker-culture-the-hacker/"/>
    <updated>2013-06-01T23:46:00-07:00</updated>
    <id>http://CptnKirk.github.io/blog/2013/06/01/cultivating-a-hacker-culture-the-hacker</id>
    <content type="html"><![CDATA[<p>I&rsquo;m the type of person who is constantly looking at new technology or ways of developing software.  I&rsquo;m always looking for the next big thing that will allow me to do something I couldn&rsquo;t before, or do the same stuff quicker or easier.  I&rsquo;ve recently been attracted to watching YouTube presentations on whatever it is that&rsquo;s on my mind.  Recently something got me thinking.  Nearly all of the best presentations are given by a class of developers that I associate with being &ldquo;hackers&rdquo;.</p>

<!-- more -->


<p></p>

<p>What&rsquo;s a &ldquo;hacker&rdquo; to me?  If you&rsquo;ve ever seen the movie Hackers (<a href="http://www.imdb.com/title/tt0113243/">http://www.imdb.com/title/tt0113243/</a>), that&rsquo;s what I&rsquo;m talking about.  A class of developer with a thirst for knowledge and ability.  Driven to be &ldquo;elite&rdquo; and to have their abilities recognized.  Here are a couple examples of some Erlang hackers.  The two talks are valuable in general, even if you aren&rsquo;t interested in Erlang (and if you aren&rsquo;t interested in Erlang, you probably should be :&ndash;)</p>

<p><a href="http://www.youtube.com/watch?v=mGKMq0Cyiks">http://www.youtube.com/watch?v=mGKMq0Cyiks</a> &mdash; Erlang: Noob to production in 2 months
<a href="http://www.youtube.com/watch?v=8BNpOHFvg_Q">http://www.youtube.com/watch?v=8BNpOHFvg_Q</a> &mdash; Lager: Logging with confidence</p>

<p>One shows how a hacker developed and deployed some web based chat services to his community in a couple months.  The other shows how a hacker decided to improve the logging standard that he was forced to work with; and by doing so elevated the state of the art for an entire community.</p>

<p>I&rsquo;ve recently been discussing continuous integration with my co-workers.  To most hacker cultures this is simply a given; the first presenter talks about his continuous build/deploy process.  He was pimping Erlang&rsquo;s hot code deployment and &ldquo;telnet to the VM&rdquo; capabilities, continuous integration was a given but he briefly discussed his setup.</p>

<p>So where am I going with this?  I&rsquo;ve come to realize that I respect and admire a lot of &ldquo;hacker&rdquo; qualities.  I want more of that, I want to embody more of that, and I love working with people that have similar aspirations and values.</p>

<p>Up next.  The Hacker and The Hacker Culture.</p>
]]></content>
  </entry>
  
</feed>
